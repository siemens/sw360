#!/usr/bin/python
# -----------------------------------------------------------------------------
# Copyright Siemens AG, 2022. Part of the SW360 Portal Project.
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
#
# This is a manual database migration script. It is assumed that a
# dedicated framework for automatic migration will be written in the
# future. When that happens, this script should be refactored to conform
# to the framework's prerequisites to be run by the framework. For
# example, server address and db name should be parameterized, the code
# reorganized into a single class or function, etc.
#
# This script is repair broken release to vulnerability relations
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------

import time

import couchdb
import json

# ---------------------------------------
# constants
# ---------------------------------------

DRY_RUN = True

COUCH_SERVER = "http://localhost:5984/"
DBNAME = 'sw360db'
VM_DBNAME = 'sw360vm'

couch = couchdb.Server(COUCH_SERVER)
db = couch[DBNAME]

vm_db = couch[VM_DBNAME]

# ----------------------------------------
# queries
# ----------------------------------------

# get all releases with external ids
all_releases_with_externalIds = {
    "selector": {
        "type": {
            "$eq": "release"
        },
        "externalIds": {
            "$exists": True,
            "$keyMapMatch": {
                "$eq": "com.siemens.svm.component.id"
            }
        }
    },
    "limit": 99999
}

all_vulnerabilities = {
    "selector": {
        "type": {
            "$eq": "vulnerability"
        },
        "assignedExtComponentIds": {
            "$exists": True
        }
    },
    "limit": 99999
}

vulnerability_relation_view_name = "_design/ReleaseVulnerabilityRelation/_view/byVulRel"


# ---------------------------------------
# functions
# ---------------------------------------
def get_release_to_svm_component_id_map(all_releases):
    list_of_rel_svm_id_to_rel_id = []
    rel_svm_id_to_rel_id = {}
    for rel in all_releases:
        rel_svm_id = rel['externalIds']['com.siemens.svm.component.id']
        rel_id: object = rel['_id']
        rel_svm_id_to_rel_id.update({rel_svm_id: rel_id})
    list_of_rel_svm_id_to_rel_id.append(rel_svm_id_to_rel_id)
    return list_of_rel_svm_id_to_rel_id


def get_vulnerability_to_assigned_ext_component_ids(all_vulnerability):
    vulnerability_to_assigned_ext_component_ids = {}
    list_of_vulnerability_to_assigned_ext_component_ids = []
    for vulnerability in all_vulnerability:
        assigned_ext_component_ids = vulnerability.get('assignedExtComponentIds')
        vulnerability_id = vulnerability.get('_id')
        vulnerability_to_assigned_ext_component_ids.update({vulnerability_id: assigned_ext_component_ids})
    list_of_vulnerability_to_assigned_ext_component_ids.append(vulnerability_to_assigned_ext_component_ids)
    return list_of_vulnerability_to_assigned_ext_component_ids


def group_svm_comp_id_to_vul_ids(vulnerability_to_assigned_ext_component_ids):
    svm_id_to_vulnerability_id = {}
    for items in vulnerability_to_assigned_ext_component_ids:
        for vulnerability_id, assigned_ext_component_ids in items.items():
            vulnerability_ids = [vulnerability_id]
            for svm_component_id in assigned_ext_component_ids:
                if svm_component_id not in svm_id_to_vulnerability_id:
                    vulnerability_ids = {vulnerability_id}
                    svm_id_to_vulnerability_id[svm_component_id] = vulnerability_ids
                else:
                    existing_vulnerability_ids = svm_id_to_vulnerability_id.get(svm_component_id)
                    existing_vulnerability_ids.add(vulnerability_id)
                    svm_id_to_vulnerability_id[svm_component_id] = existing_vulnerability_ids

    return svm_id_to_vulnerability_id


def create_missing_relations(log_file, svm_comp_id_to_rel_id, svm_cmp_id_to_vul_ids, result_rows):
    log = {'relations to be updated': []}
    for svm_comp_to_rel_id in svm_comp_id_to_rel_id:
        for svm_cmp_id, release_id in svm_comp_to_rel_id.items():
            vulnerability_ids = svm_cmp_id_to_vul_ids.get(svm_cmp_id)
            if vulnerability_ids is not None:
                for vulnerability_id in vulnerability_ids:
                    if not verify_if_the_relations_exists(release_id, vulnerability_id, result_rows):
                        created_relations = {'releaseIdToVulnerabilityId': release_id + "--->" + vulnerability_id}
                        log['relations to be updated'].append(created_relations)
                        relation_doc = {"type": "releasevulnerabilityrelation", "releaseId": release_id,
                                        "vulnerabilityId": vulnerability_id}
                        if not DRY_RUN:
                            vm_db.save(relation_doc)
    json.dump(log, log_file, indent=4, sort_keys=True)


def verify_if_the_relations_exists(release_id, vulnerability_id, result_rows):
    rel_id = ''
    vul_id = ''
    flag = False
    for rw in result_rows:
        rel_id = rw['value'].get("releaseId")
        vul_id = rw['value'].get('vulnerabilityId')
        if rel_id is not None and vul_id is not None:
            flag = (release_id == rel_id) and (vulnerability_id == vul_id)
            if flag:
                break

    return flag


def run():
    log_file = open("059_repair_broken_release_vulnerability.log", 'w')
    print('\nGetting all releases having external Ids')

    start_time = time.time()
    all_releases_having_external_ids = db.find(all_releases_with_externalIds)
    print('Time taken to get all releases having external ids: ' + "{0:.2f}".format(time.time() - start_time) + 's')

    print('\nGetting all vulnerabilities')
    start_time = time.time()
    all_vulnerability = vm_db.find(all_vulnerabilities)
    print('Time taken to get all vulnerabilities: ' + "{0:.2f}".format(time.time() - start_time) + 's')

    print('\nMapping release svm component id to release id')
    start_time = time.time()
    svm_comp_id_to_rel_id = get_release_to_svm_component_id_map(all_releases_having_external_ids)
    print(
        "Time taken to map release svm component id to release id: " + "{0:.2f}".format(time.time() - start_time) + 's')

    print('\nMapping vulnerability id to assigned ext component ids')
    start_time = time.time()
    vulnerability_to_assigned_ext_component_ids = get_vulnerability_to_assigned_ext_component_ids(all_vulnerability)
    print('Time taken map vulnerability id to assigned ext component ids: ' + "{0:.2f}".format(time.time() - start_time) + 's')

    print('\nGrouping vulnerability ids based on svm component id')
    start_time = time.time()
    svm_cmp_id_to_vul_ids = group_svm_comp_id_to_vul_ids(vulnerability_to_assigned_ext_component_ids)
    print('Time taken to group vulnerability ids based on svm component id: ' + "{0:.2f}".format(time.time() - start_time) + 's')

    print('\nGetting release vulnerability view data')
    start_time = time.time()
    result_rows = vm_db.view(vulnerability_relation_view_name)
    print('Time taken to get release vulnerability view data: ' + "{0:.2f}".format(time.time() - start_time) + 's')

    print('\nCreating missing relations')
    start_time = time.time()
    create_missing_relations(log_file, svm_comp_id_to_rel_id, svm_cmp_id_to_vul_ids, result_rows)
    print('Time taken to create missing relations: ' + "{0:.2f}".format(time.time() - start_time) + 's')

    log_file.close()
    print('\n\n------------------------------------------')
    print('Please check log file "059_repair_broken_release_vulnerability.log" in this directory for details')
    print('------------------------------------------')


# --------------------------------

startTime = time.time()

run()
print('\nTime of migration: ' + "{0:.2f}".format(time.time() - startTime) + 's')

