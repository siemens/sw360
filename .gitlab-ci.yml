# SPDX-FileCopyrightText: Â© Siemens AG

# SPDX-License-Identifier: EPL-2.0

image: maven:3.6.3-openjdk-11

stages:
- build
- deploy

services:
- couchdb:3.3

variables:
  PACKAGE_STORE_PATH: "/home/${SSH_PACKAGE_USER}/cipackages/${CI_COMMIT_REF_SLUG}"
  DEPLOY_STORE_PATH:  "/home/${SSH_TEST_DEPLOY_USER}/deppackage"
  PACKAGE_NAME_PREFIX: "sw360"
  COUCHDB_USER: $COUCHDB_TEST_USER
  COUCHDB_PASSWORD: $COUCHDB_TEST_PWD
  GITLAB_PACKAGE_PATH: "/packages"
  HOME: /root
  https_proxy: $CODE_PROXY
  http_proxy: $CODE_PROXY
  no_proxy: couchdb,linux.siemens.com,.siemens.com,.siemens.de,.siemens.co.in
  _JAVA_OPTIONS: -Djdk.net.URLClassPath.disableClassPathURLCheck=true -DSPDXParser.OnlyUseLocalLicenses=true -Dhttp.proxySet=true -Dhttp.proxyHost=$CODE_PROXY_HOST -Dhttp.proxyPort=$CODE_PROXY_PORT -Dhttp.nonProxyHosts=localhost|couchdb
  GRADLE_USER_HOME: $HOME/.gradle

build_sw360:
  stage: build
  script:
  - echo "Running build_sw360 by user - ${GITLAB_USER_EMAIL}"
  - mkdir -p ${GITLAB_PACKAGE_PATH}/artifacts/packages/deploy ${GITLAB_PACKAGE_PATH}/artifacts/packages/webapps ${GITLAB_PACKAGE_PATH}/artifacts/scripts /etc/sw360/

  # setting remote repos url to download mvn packages
  - printf '<settings><mirrors><mirror><mirrorOf>*</mirrorOf><name>remote-repos</name><url>https://devops.bt.siemens.com/artifactory/maven2-all</url><id>remote-repos</id></mirror></mirrors></settings>' > ~/.m2/settings.xml

  # setting proxy for gradle, required to build thrift
  - |
    mkdir -p $GRADLE_USER_HOME
    printf "systemProp.http.proxyHost=%s
    systemProp.http.proxyPort=%s
    systemProp.http.nonProxyHosts='%s'
    systemProp.https.proxyHost=%s
    systemProp.https.proxyPort=%s
    " \
      "$CODE_PROXY_HOST" "$CODE_PROXY_PORT" "localhost|couchdb|*.siemens.com|*.siemens.de|*.siemens.co.in" \
      "$CODE_PROXY_HOST" "$CODE_PROXY_PORT" >> $GRADLE_USER_HOME/gradle.properties

  # Create couchdb-test.properties in /etc/sw360 to run testcases
  - printf "couchdb.url = %s\ncouchdb.user = %s\ncouchdb.password = %s\n" "http://couchdb:5984" "$COUCHDB_TEST_USER" "$COUCHDB_TEST_PWD" > /etc/sw360/couchdb-test.properties

  # Create databasetest.properties in /etc/sw360 to run testcases
  - printf "couch_db_url = %s\ncouchdb.username = %s\ncouchdb.password = %s\n" "http://couchdb:5984" "$COUCHDB_TEST_USER" "$COUCHDB_TEST_PWD" > /etc/sw360/databasetest.properties

  - |
    DEBIAN_FRONTEND=noninteractive apt-get -qq update
    DEBIAN_FRONTEND=noninteractive apt-get -qq -y install --no-install-recommends \
      build-essential rsync \
      zip python3 python3-pip \
      cmake pkg-config flex bison
    python3 -m pip install --upgrade setuptools wheel pip
    python3 -m pip install --upgrade mkdocs mkdocs-material awscli
  - ./scripts/install-thrift.sh

  # Check if CouchDB is running
  - curl -s couchdb:5984/_up | grep -q '"status":"ok"'

  # Checkout branch for proper footer
  - git checkout ${CI_COMMIT_REF_NAME}

  # Build code and create artifacts
  - |
    mvn clean package -P deploy -Dhelp-docs=true -Dbase.deploy.dir=. \
     -Dliferay.deploy.dir=${GITLAB_PACKAGE_PATH}/artifacts/packages/deploy \
     -Dbackend.deploy.dir=${GITLAB_PACKAGE_PATH}/artifacts/packages/webapps \
     -Drest.deploy.dir=${GITLAB_PACKAGE_PATH}/artifacts/packages/webapps
  - cp ./scripts/aws_codedeploy/application* ${GITLAB_PACKAGE_PATH}/artifacts/scripts
  - cp ./scripts/aws_codedeploy/appspec.yml ${GITLAB_PACKAGE_PATH}/artifacts/
  - pushd ${GITLAB_PACKAGE_PATH}/artifacts
  - zip -r ${GITLAB_PACKAGE_PATH}/artifacts.zip *
  - popd

  # Upload packages to S3 if CI_COMMIT_REF_SLUG matches DEPLOY_BRANCH
  - ./scripts/aws_codedeploy/upload_packages_to_s3.sh ${GITLAB_PACKAGE_PATH}/artifacts.zip
  cache:
    key: maven
    paths:
      - ~/.m2/

deploy_sw360_DEV_server:
  allow_failure: true
  stage: deploy
  environment:
    name: Dev
    url: "https://dev.sw360.siemens.com/"
    deployment_tier: testing
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: '$CI_COMMIT_BRANCH == $AUTO_DEPLOY_BRANCH_FOR_DEV'
      when: on_success
    - if: '$CI_COMMIT_BRANCH != $AUTO_DEPLOY_BRANCH_FOR_DEV'
      when: manual
  before_script:
  - echo "Running deploy_sw360_DEV_server by user - ${GITLAB_USER_EMAIL}"
  script:
  - echo "Trigger aws CodeDeploy for Dev server"
  - ./scripts/aws_codedeploy/check_is_user_allowed_to_trigger_job.sh
  - apt-get -qq update && apt-get install awscli -y --no-install-recommends
  - DEPLOYMENT_ID=$(aws deploy create-deployment --application-name ${CODE_DEPLOY_APP_NAME_DEV} --deployment-group-name ${CODE_DEPLOY_GROUP_NAME_DEV} --description "Trigger from GitLab CI ${CI_COMMIT_REF_SLUG} ${CI_COMMIT_SHA}" --s3-location bucket=${SW360_BUCKET_NAME},bundleType=zip,key=${PACKAGE_NAME_PREFIX}_${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}.zip | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["deploymentId"]')
  - ./scripts/aws_codedeploy/check_deployment_status.sh ${DEPLOYMENT_ID}

deploy_sw360_STAGE_server:
  allow_failure: true
  stage: deploy
  environment:
    name: Stage
    url: "https://stage.sw360.siemens.com/"
    deployment_tier: staging
  when: manual
  before_script:
  - echo "Running deploy_sw360_STAGE_server by user - ${GITLAB_USER_EMAIL}"
  script:
  - echo "Trigger aws CodeDeploy for Stage server"
  - ./scripts/aws_codedeploy/check_is_user_allowed_to_trigger_job.sh
  - apt-get -qq update && apt-get install awscli -y --no-install-recommends
  - DEPLOYMENT_ID=$(aws deploy create-deployment --application-name ${CODE_DEPLOY_APP_NAME_STAGE} --deployment-group-name ${CODE_DEPLOY_GROUP_NAME_STAGE} --description "Trigger from GitLab CI ${CI_COMMIT_REF_SLUG} ${CI_COMMIT_SHA}" --s3-location bucket=${SW360_BUCKET_NAME},bundleType=zip,key=${PACKAGE_NAME_PREFIX}_${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}.zip | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["deploymentId"]')
  - ./scripts/aws_codedeploy/check_deployment_status.sh ${DEPLOYMENT_ID}

deploy_sw360_PROD_server:
  allow_failure: true
  stage: deploy
  environment:
    name: Prod
    url: "https://sw360.siemens.com/"
    deployment_tier: production
  when: manual
  only:
    - masterct
  before_script:
  - echo "Running deploy_sw360_Prod_server by user - ${GITLAB_USER_EMAIL}"
  script:
  - echo "Trigger aws CodeDeploy for Prod server"
  - ./scripts/aws_codedeploy/check_is_user_allowed_to_trigger_job.sh
  - apt-get -qq update && apt-get install awscli -y --no-install-recommends
  - DEPLOYMENT_ID=$(aws deploy create-deployment --application-name ${CODE_DEPLOY_APP_NAME_PROD} --deployment-group-name ${CODE_DEPLOY_GROUP_NAME_PROD} --description "Trigger from GitLab CI ${CI_COMMIT_REF_SLUG} ${CI_COMMIT_SHA}" --s3-location bucket=${SW360_BUCKET_NAME},bundleType=zip,key=${PACKAGE_NAME_PREFIX}_${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHORT_SHA}.zip | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["deploymentId"]')
  - ./scripts/aws_codedeploy/check_deployment_status.sh ${DEPLOYMENT_ID}
