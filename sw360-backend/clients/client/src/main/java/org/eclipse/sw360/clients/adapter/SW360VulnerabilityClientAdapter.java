/*
 * Copyright Siemens AG, 2021. Part of the SW360 Portal Project.
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.eclipse.sw360.clients.adapter;

import java.util.List;
import java.util.Optional;

import org.eclipse.sw360.clients.rest.SW360VulnerabilityClient;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360ReleaseVulnerabilityRelation;
import org.eclipse.sw360.clients.rest.resource.vulnerabilities.SW360Vulnerability;
import org.eclipse.sw360.clients.utils.SW360ClientException;

/**
 * <p>
 * Service interface for an adapter supporting operations on SW360 vulnerability
 * entities.
 * </p>
 */
public interface SW360VulnerabilityClientAdapter {
    /**
     * Returns the {@code SW360VulnerabilityClient} used by this adapter. The client
     * can be used for low-level operations against the SW360 vulnerabilities
     * endpoint.
     *
     * @return the {@code SW360VulnerabilityClient}
     */
    SW360VulnerabilityClient getVulnerabilityClient();

    /**
     * Tries to find the vulnerability with the given ID. Result is an
     * {@code Optional}; if the external ID cannot be resolved, the
     * {@code Optional} is empty.
     *
     * @param externalId the ID of the vulnerability in question
     * @return an {@code Optional} with the vulnerability found
     */
    Optional<SW360Vulnerability> getVulnerabilityByExternalId(String externalId);
    
    /**
     * list with the Vulnerabilities that were found
     *
     * @return a list with the Vulnerabilities that were found
     */
    List<SW360Vulnerability> getVulnerabilities();
    
    /**
     * Creates a new vulnerability in SW360 based on the passed in entity. The given
     * entity must have all mandatory properties defined.
     *
     * @param vulnerability the entity describing the vulnerability to be created
     * @return the newly created vulnerability entity
     */
    SW360Vulnerability createVulnerability(SW360Vulnerability vulnerability);


    /**
     * Updates a vulnerability. The vulnerability is updated in the database based on the
     * properties of the passed in entity.
     *
     * @param vulnerability the vulnerability to be updated
     * @param externalId the vulnerability to be updated
     * @return the updated vulnerability
     */
    SW360Vulnerability updateVulnerability(SW360Vulnerability vulnerability, String externalId);

    /**
     * Deletes the vulnerability with the given ID. It
     * inspects the StatusCode returned by SW360 and throws an
     * exception if the operation was not successful.
     *
     * @param externalId of the vulnerability to delete
     * @return status code of request
     */
    Integer deleteVulnerability(String externalId);
    
    /**
     * Creates a new vulnerability release relation in SW360 based on the passed in entity. The given
     * entity must have all mandatory properties defined.
     *
     * @param externalId of the vulnerability of vulnerability release relation to be created
     * @param releaseVulnerabilityRelation release relation the entity describing the vulnerability release relation to be created
     * @return the newly created vulnerability release relation entity
     */
    SW360ReleaseVulnerabilityRelation createVulnerabilityReleaseRelation(String externalId, SW360ReleaseVulnerabilityRelation releaseVulnerabilityRelation);

    /**
     * Deletes the vulnerability release relation with the given ID. It
     * inspects the StatusCode returned by SW360 and throws an
     * exception if the operation was not successful.
     *
     * @param externalId of the vulnerability in vulnerability release relation to delete
     * @param releaseId of the release in vulnerability release relation to delete
     * @return status code of request
     * @throws SW360ClientException if the vulnerability release relation could not be deleted
     */
    Integer deleteVulnerabilityReleaseRelation(String externalId, String releaseId);
}
